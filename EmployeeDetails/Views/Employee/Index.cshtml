
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Index</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.css">
    <script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.js"></script>
    <style>
        .a {
            text-align: right;
        }

        .b {
            text-align: center;
        }

        .abc {
            display: flex;
            justify-content: center;
        }

        .abcd {
            display: flex;
            justify-content: right;
        }

        a {
            text-decoration: none;
        }

        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            margin-top: 20px;
        }

            .pagination a {
                text-decoration: none;
                padding: 10px;
                margin: 5px;
                color: #333;
                border: 1px solid #ccc;
                border-radius: 4px;
                transition: background-color 0.3s, color 0.3s;
            }

                .pagination a:hover {
                    background-color: #007bff;
                    color: #fff;
                }

                .pagination a.current {
                    background-color: #007bff;
                    color: #fff;
                    cursor: default;
                }
    </style>
</head>
<body>

    <div class="container">

        <h1 class="abc"><b>Employee List</b></h1>
        <div class=a>
            <!-- Link or button to trigger the export to Excel action -->
            @Html.ActionLink("Export to Excel", "ExportToExcel", null, new { @class = "btn btn-primary a" })


        </div>




        <form method="get" action="@Url.Action("Index", "Employee")">
            <label for="numRecords">Number of Records:</label>
            <select name="numRecords" id="numRecords" onchange="this.form.submit()" required>
                @*<option value="0"></option>*@
                <option value="5" @if (Request["numRecords"] == "5") { <text> selected</text> }>5</option>
                <option value="10" @if (Request["numRecords"] == "10") { <text> selected</text> }>10</option>
                <option value="15" @if (Request["numRecords"] == "15") { <text> selected</text> }>15</option>
               
                <!-- Add more options as needed -->
            </select>
            @*<input type="submit" value="Update" />*@
        </form>




        <div class="abcd">
            <label for="searchInput" class="form-label "></label>
            <input type="text" id="search" placeholder="Search">

        </div>

        <br />



        <table class="table table-bordered" id="employeeD">
            <tr class="table-dark">
                @*<th>Employee ID</th>*@
                <th>Name</th>
                <th>Department</th>
                <th>Age</th>
                <th>Skills</th>
                @*<th>Gender</th>*@
                <th>Salary</th>
                <th>Action</th>

                <!-- Add additional columns as needed -->
            </tr>
            @foreach (var employee in Model)
            {

                <tr>
                    @*<td>@employee.EmpID</td>*@
                    <td>@employee.EName</td>
                    <td>@employee.DeptName</td>
                    <td>@employee.Age</td>
                    <td>@employee.Skills </td>
                    
                    <td>@employee.Salary</td>


                    <td>
                        @Html.ActionLink("Update", "Update", new { id = employee.EmpID }, new { @class = "btn btn-primary" })

                        @Html.ActionLink("Details", "Details", new { id = employee.EmpID }, new { @class = "btn btn-info" })
                        @Html.ActionLink("Delete", "DeleteTemp", new { id = employee.EmpID }, new { @class = "btn btn-danger" })


                    </td>
                    <!-- Add additional columns as needed -->
                </tr>

            }
        </table>
        <p>
            @Html.ActionLink("Add Employee", "Create", null, new { @class = "btn btn-primary" })
            @Html.ActionLink("Get Deleted Employee Records", "GetDeletedRecords", null, new { @class = "btn btn-primary" })

        </p>
        @if (ViewBag.PaginationInfo != null)
        {
            var paginationInfo = ViewBag.PaginationInfo;
            <div class="pagination abc">
                @if (paginationInfo.CurrentPage > 1)
                {
                    <a href="@Url.Action("Index", new { page = paginationInfo.CurrentPage - 1, pageSize = paginationInfo.PageSize })">Previous</a>
                }

                @for (int i = 1; i <= paginationInfo.TotalPages; i++)
                {
                    <a href="@Url.Action("Index", new { page = i, pageSize = paginationInfo.PageSize })" @(i == paginationInfo.CurrentPage ? "class=current" : "")>  @i   </a>
                }

                @if (paginationInfo.CurrentPage < paginationInfo.TotalPages)
                {
                    <a href="@Url.Action("Index", new { page = paginationInfo.CurrentPage + 1, pageSize = paginationInfo.PageSize })">Next</a>
                }
            </div>
        }
        <br />

        @*<div class="b"><button onclick="printTable()">Print</button></div>*@
        <div class="b">
            <!-- Button to trigger the PrintTable action -->
            <button class="btn btn-success" onclick="printTable()">Print Table</button>
        </div>


    </div>

    <script>
        function printTable() {
            // Open a new window for printing
            var printWindow = window.open('@Url.Action("PrintTable", "Employee")', '_blank');
            printWindow.print();
        }

        document.addEventListener('DOMContentLoaded', function () {
            var searchInput = document.getElementById('search');
            var table = document.getElementById('employeeD');
            var rows = table.getElementsByTagName('tr');

            searchInput.addEventListener('input', function () {
                var filter = searchInput.value.toLowerCase();

                for (var i = 1; i < rows.length; i++) {
                    var row = rows[i];
                    var text = row.textContent.toLowerCase();

                    row.style.display = text.indexOf(filter) > -1 ? '' : 'none';
                }
            });
        });

        document.addEventListener('DOMContentLoaded', function () {
            var table = document.getElementById('employeeD');
            var headers = table.getElementsByTagName('th');

            for (var i = 0; i < headers.length; i++) {
                headers[i].addEventListener('click', function () {
                    sortTable(this.cellIndex);
                });
            }

            function sortTable(columnIndex) {
                var rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
                switching = true;
                dir = "asc";

                while (switching) {
                    switching = false;
                    rows = table.rows;

                    for (i = 1; i < (rows.length - 1); i++) {
                        shouldSwitch = false;

                        x = rows[i].getElementsByTagName("td")[columnIndex];
                        y = rows[i + 1].getElementsByTagName("td")[columnIndex];

                        if (dir == "asc") {
                            if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                                shouldSwitch = true;
                                break;
                            }
                        } else if (dir == "desc") {
                            if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                                shouldSwitch = true;
                                break;
                            }
                        }
                    }

                    if (shouldSwitch) {
                        rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                        switching = true;
                        switchcount++;
                    } else {
                        if (switchcount == 0 && dir == "asc") {
                            dir = "desc";
                            switching = true;
                        }
                    }
                }
            }
        });

    </script>



</body>
</html>
